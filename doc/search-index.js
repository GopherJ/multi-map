var searchIndex = {};
searchIndex["multi_map"] = {"doc":"# multi-map","items":[[3,"MultiMap","multi_map","",null,null],[11,"new","","Creates a new MultiMap. The primary key is of type `K1` and the\nsecondary key is of type `K2`. The value is of type `V`. This is as\ncompared to a `std::collections::HashMap` which is typed on just `K` and\n`V`.",0,{"inputs":[],"output":{"name":"multimap"}}],[11,"insert","","Insert an item into the MultiMap. You must supply both keys to insert\nan item. The keys cannot be modified at a later date, so if you only\nhave one key at this time, use a placeholder value for the second key\n(perhaps `K2` is `Option&lt;...&gt;`) and remove then re-insert when the\nsecond key becomes available.",0,null],[11,"get","","Obtain a reference to an item in the MultiMap using the primary key,\njust like a HashMap.",0,null],[11,"get_mut","","Obtain a mutable reference to an item in the MultiMap using the\nprimary key, just like a HashMap.",0,null],[11,"get_alt","","Obtain a reference to an item in the MultiMap using the secondary key.\nOrdinary HashMaps can&#39;t do this.",0,null],[11,"get_mut_alt","","Obtain a mutable reference to an item in the MultiMap using the\nsecondary key. Ordinary HashMaps can&#39;t do this.",0,null],[11,"remove","","Remove an item from the HashMap using the primary key. The value for the\ngiven key is returned (if it exists), just like a HashMap. This removes\nan item from the main HashMap, and the second `&lt;K2, K1&gt;` HashMap.",0,null],[11,"remove_alt","","Remove an item from the HashMap using the secondary key. The value for\nthe given key is returned (if it exists). Ordinary HashMaps can&#39;t do\nthis. This removes an item from both the main HashMap and the second\n`&lt;K2, K1&gt;` HashMap.",0,null],[11,"iter","","Iterate through all the values in the MultiMap. Note that the values\nare `(K2, V)` tuples, not `V`, as you would get with a HashMap.",0,null]],"paths":[[3,"MultiMap"]]};
initSearch(searchIndex);
